{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","element","length","About","myStyle","color","backgroundColor","style","Alert","height","alert","msg","App","setMode","setAlert","showAlert","message","setTimeout","console","log","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9d9b11d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n function Navbar(props) {\r\n   \r\n        return (\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                            </li>\r\n                        </ul>\r\n                        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                        </div>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n                    }\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    const submit = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const upperCase = () => {\r\n        // console.log(text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const LowerCase = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const ClearText = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n    const CopyText = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }  \r\n    const RemoveSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container mt-4\">\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={submit} rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={upperCase}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={LowerCase}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={CopyText}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={RemoveSpaces}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={ClearText}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-2\">\r\n                <h3>Your text summary</h3>\r\n                <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n                <p>{0.0008 * text.split(\" \").length} Minutes to read</p>\r\n                <h5>Preview</h5>\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TextForm;","import React, { useState } from 'react'\r\n\r\nfunction About(props) {\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white',\r\n    // })\r\n\r\n    let myStyle = {\r\n        color: props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode === 'dark' ? 'black' : 'white'\r\n    }\r\n    // const [button, SetButton] = useState('Enable Dark Mode');\r\n    // const toggleStyle = () => {\r\n    //     if (myStyle.color === 'black') {\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         SetButton('Enable Light Mode');\r\n    //     }\r\n    //     else {\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         SetButton('Enable Dark Mode');\r\n\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className=\"accordion container my-4\" id=\"accordionExample\" style={myStyle}>\r\n            <h1>About us</h1>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"container my-3\">\r\n                <button type='button' onClick={toggleStyle} className=\"btn btn-primary\">{button}</button>\r\n            </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        <div style={{ height: '50px' }}>\r\n            {props.alert && <div>\r\n                <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n                    <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n                    {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert,setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n     setAlert({\n      msg:message,\n      type:type\n     })\n     setTimeout(()=>{\n      setAlert(null);\n     },1500)\n  }\n  const toggleMode = () => {\n    console.log(\"Hello\");\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      document.title = 'TextUtils - Dark Mode';\n      showAlert('Dark mode has been enabled', 'Success');\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.title = 'TextUtils - Light Mode';\n      showAlert('Light mode has been enabled', 'Success');\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        {/* <TextForm heading=\"Enter the text to analyze below\"  mode={mode}/> */}\n        {/* <About/> */}\n        <Switch>\n          <Route exact path=\"/about\">\n            <About  mode={mode} />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm heading=\"Enter the text to analyze below\" mode={mode} />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}